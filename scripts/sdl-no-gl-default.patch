diff --git a/src/video/SDL_video.c b/src/video/SDL_video.c
index c63f74631..0aa85407e 100644
--- a/src/video/SDL_video.c
+++ b/src/video/SDL_video.c
@@ -1432,12 +1432,6 @@ SDL_CreateWindow(const char *title, int x, int y, int w, int h, Uint32 flags)
         return NULL;
     }
 
-    /* Some platforms have OpenGL enabled by default */
-#if (SDL_VIDEO_OPENGL && __MACOSX__) || __IPHONEOS__ || __ANDROID__ || __NACL__
-    if (!_this->is_dummy && !(flags & SDL_WINDOW_VULKAN)) {
-        flags |= SDL_WINDOW_OPENGL;
-    }
-#endif
     if (flags & SDL_WINDOW_OPENGL) {
         if (!_this->GL_CreateContext) {
             SDL_SetError("OpenGL support is either not configured in SDL "
diff --git a/src/video/android/SDL_androidevents.c b/src/video/android/SDL_androidevents.c
index de560c96a..96f99ffb4 100644
--- a/src/video/android/SDL_androidevents.c
+++ b/src/video/android/SDL_androidevents.c
@@ -53,35 +53,6 @@ SDL_NumberOfEvents(Uint32 type)
     return SDL_PeepEvents(NULL, 0, SDL_PEEKEVENT, type, type);
 }
 
-static void
-android_egl_context_restore(SDL_Window *window)
-{
-    if (window) {
-        SDL_Event event;
-        SDL_WindowData *data = (SDL_WindowData *) window->driverdata;
-        if (SDL_GL_MakeCurrent(window, (SDL_GLContext) data->egl_context) < 0) {
-            /* The context is no longer valid, create a new one */
-            data->egl_context = (EGLContext) SDL_GL_CreateContext(window);
-            SDL_GL_MakeCurrent(window, (SDL_GLContext) data->egl_context);
-            event.type = SDL_RENDER_DEVICE_RESET;
-            SDL_PushEvent(&event);
-        }
-    }
-}
-
-static void
-android_egl_context_backup(SDL_Window *window)
-{
-    if (window) {
-        /* Keep a copy of the EGL Context so we can try to restore it when we resume */
-        SDL_WindowData *data = (SDL_WindowData *) window->driverdata;
-        data->egl_context = SDL_GL_GetCurrentContext();
-        /* We need to do this so the EGLSurface can be freed */
-        SDL_GL_MakeCurrent(window, NULL);
-    }
-}
-
-
 /*
  * Android_ResumeSem and Android_PauseSem are signaled from Java_org_libsdl_app_SDLActivity_nativePause and Java_org_libsdl_app_SDLActivity_nativeResume
  * When the pause semaphore is signaled, if Android_PumpEvents_Blocking is used, the event loop will block until the resume signal is emitted.
@@ -96,11 +67,6 @@ Android_PumpEvents_Blocking(_THIS)
 
     if (videodata->isPaused) {
 
-        /* Make sure this is the last thing we do before pausing */
-        SDL_LockMutex(Android_ActivityMutex);
-        android_egl_context_backup(Android_Window);
-        SDL_UnlockMutex(Android_ActivityMutex);
-
         ANDROIDAUDIO_PauseDevices();
         openslES_PauseDevices();
 
@@ -111,13 +77,6 @@ Android_PumpEvents_Blocking(_THIS)
             ANDROIDAUDIO_ResumeDevices();
             openslES_ResumeDevices();
 
-            /* Restore the GL Context from here, as this operation is thread dependent */
-            if (!SDL_HasEvent(SDL_QUIT)) {
-                SDL_LockMutex(Android_ActivityMutex);
-                android_egl_context_restore(Android_Window);
-                SDL_UnlockMutex(Android_ActivityMutex);
-            }
-
             /* Make sure SW Keyboard is restored when an app becomes foreground */
             if (SDL_IsTextInputActive()) {
                 Android_StartTextInput(_this); /* Only showTextInput */
@@ -148,10 +107,6 @@ Android_PumpEvents_NonBlocking(_THIS)
 
         if (backup_context) {
 
-            SDL_LockMutex(Android_ActivityMutex);
-            android_egl_context_backup(Android_Window);
-            SDL_UnlockMutex(Android_ActivityMutex);
-
             ANDROIDAUDIO_PauseDevices();
             openslES_PauseDevices();
 
@@ -166,13 +121,6 @@ Android_PumpEvents_NonBlocking(_THIS)
             ANDROIDAUDIO_ResumeDevices();
             openslES_ResumeDevices();
 
-            /* Restore the GL Context from here, as this operation is thread dependent */
-            if (!SDL_HasEvent(SDL_QUIT)) {
-                SDL_LockMutex(Android_ActivityMutex);
-                android_egl_context_restore(Android_Window);
-                SDL_UnlockMutex(Android_ActivityMutex);
-            }
-
             /* Make sure SW Keyboard is restored when an app becomes foreground */
             if (SDL_IsTextInputActive()) {
                 Android_StartTextInput(_this); /* Only showTextInput */
diff --git a/src/video/android/SDL_androidwindow.c b/src/video/android/SDL_androidwindow.c
index 64eff5203..5847887f5 100644
--- a/src/video/android/SDL_androidwindow.c
+++ b/src/video/android/SDL_androidwindow.c
@@ -80,9 +80,7 @@ Android_CreateWindow(_THIS, SDL_Window * window)
         goto endfunction;
     }
 
-    /* Do not create EGLSurface for Vulkan window since it will then make the window
-       incompatible with vkCreateAndroidSurfaceKHR */
-    if ((window->flags & SDL_WINDOW_VULKAN) == 0) {
+    if ((window->flags & SDL_WINDOW_OPENGL) != 0) {
         data->egl_surface = SDL_EGL_CreateSurface(_this, (NativeWindowType) data->native_window);
 
         if (data->egl_surface == EGL_NO_SURFACE) {
