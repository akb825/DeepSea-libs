diff --git a/googletest/include/gtest/internal/gtest-port.h b/googletest/include/gtest/internal/gtest-port.h
index 063fcb10..b96f4ea8 100644
--- a/googletest/include/gtest/internal/gtest-port.h
+++ b/googletest/include/gtest/internal/gtest-port.h
@@ -1112,6 +1112,10 @@ Derived* CheckedDowncastToActualType(Base* base) {
 
 #if GTEST_HAS_STREAM_REDIRECTION
 
+#if GTEST_OS_LINUX_ANDROID
+GTEST_API_ void SetCaptureDir(std::string dir);
+#endif
+
 // Defines the stderr capturer:
 //   CaptureStdout     - starts capturing stdout.
 //   GetCapturedStdout - stops capturing stdout and returns the captured string.
diff --git a/googletest/src/gtest-port.cc b/googletest/src/gtest-port.cc
index fc5ba6be..43d4fdff 100644
--- a/googletest/src/gtest-port.cc
+++ b/googletest/src/gtest-port.cc
@@ -1071,6 +1071,12 @@ GTEST_DISABLE_MSC_DEPRECATED_PUSH_()
 // Object that captures an output stream (stdout/stderr).
 class CapturedStream {
  public:
+#if GTEST_OS_LINUX_ANDROID
+  static void SetCaptureDir(std::string dir) {
+    capture_dir_ = std::move(dir);
+  }
+#endif
+
   // The ctor redirects the stream to a temporary file.
   explicit CapturedStream(int fd) : fd_(fd), uncaptured_fd_(dup(fd)) {
 # if GTEST_OS_WINDOWS
@@ -1105,7 +1111,13 @@ class CapturedStream {
     // The location /data/local/tmp is directly accessible from native code.
     // '/sdcard' and other variants cannot be relied on, as they are not
     // guaranteed to be mounted, or may have a delay in mounting.
-    char name_template[] = "/data/local/tmp/gtest_captured_stream.XXXXXX";
+    char base_name_template[] = "/data/local/tmp/gtest_captured_stream.XXXXXX";
+    char* name_template = base_name_template;
+    std::string custom_name_template;
+    if (!capture_dir_.empty()) {
+      custom_name_template = capture_dir_ + "/gtest_captured_stream.XXXXXX";
+      name_template = const_cast<char*>(custom_name_template.c_str());
+    }
 #  else
     char name_template[] = "/tmp/captured_stream.XXXXXX";
 #  endif  // GTEST_OS_LINUX_ANDROID
@@ -1151,9 +1163,17 @@ class CapturedStream {
   // Name of the temporary file holding the stderr output.
   ::std::string filename_;
 
+#if GTEST_OS_LINUX_ANDROID
+  static std::string capture_dir_;
+#endif
+
   GTEST_DISALLOW_COPY_AND_ASSIGN_(CapturedStream);
 };
 
+#if GTEST_OS_LINUX_ANDROID
+std::string CapturedStream::capture_dir_;
+#endif
+
 GTEST_DISABLE_MSC_DEPRECATED_POP_()
 
 static CapturedStream* g_captured_stderr = nullptr;
@@ -1179,6 +1199,13 @@ static std::string GetCapturedStream(CapturedStream** captured_stream) {
   return content;
 }
 
+#if GTEST_OS_LINUX_ANDROID
+// Sets capture directory.
+void SetCaptureDir(std::string dir) {
+  CapturedStream::SetCaptureDir(std::move(dir));
+}
+#endif
+
 // Starts capturing stdout.
 void CaptureStdout() {
   CaptureStream(kStdOutFileno, "stdout", &g_captured_stdout);
