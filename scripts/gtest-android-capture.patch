diff --git a/googletest/include/gtest/internal/gtest-port.h b/googletest/include/gtest/internal/gtest-port.h
index 0003d276..9b771146 100644
--- a/googletest/include/gtest/internal/gtest-port.h
+++ b/googletest/include/gtest/internal/gtest-port.h
@@ -1129,6 +1129,10 @@ Derived* CheckedDowncastToActualType(Base* base) {
 
 #if GTEST_HAS_STREAM_REDIRECTION
 
+#if GTEST_OS_LINUX_ANDROID
+GTEST_API_ void SetCaptureDir(std::string dir);
+#endif
+
 // Defines the stderr capturer:
 //   CaptureStdout     - starts capturing stdout.
 //   GetCapturedStdout - stops capturing stdout and returns the captured string.
diff --git a/googletest/src/gtest-port.cc b/googletest/src/gtest-port.cc
index d797fe4d..1e21201e 100644
--- a/googletest/src/gtest-port.cc
+++ b/googletest/src/gtest-port.cc
@@ -1033,6 +1033,12 @@ GTEST_DISABLE_MSC_DEPRECATED_PUSH_()
 // Object that captures an output stream (stdout/stderr).
 class CapturedStream {
  public:
+#if GTEST_OS_LINUX_ANDROID
+  static void SetCaptureDir(std::string dir) {
+    capture_dir_ = std::move(dir);
+  }
+#endif
+
   // The ctor redirects the stream to a temporary file.
   explicit CapturedStream(int fd) : fd_(fd), uncaptured_fd_(dup(fd)) {
 #if GTEST_OS_WINDOWS
@@ -1066,7 +1072,14 @@ class CapturedStream {
     // The location /data/local/tmp is directly accessible from native code.
     // '/sdcard' and other variants cannot be relied on, as they are not
     // guaranteed to be mounted, or may have a delay in mounting.
-    name_template = "/data/local/tmp/";
+    if (capture_dir_.empty()) {
+        name_template = "/data/local/tmp/";
+    } else {
+        name_template = capture_dir_;
+        if (name_template.back() != '/') {
+            name_template.push_back('/');
+        }
+    }
 #elif GTEST_OS_IOS
     char user_temp_dir[PATH_MAX + 1];
 
@@ -1139,10 +1152,18 @@ class CapturedStream {
   // Name of the temporary file holding the stderr output.
   ::std::string filename_;
 
+#if GTEST_OS_LINUX_ANDROID
+  static std::string capture_dir_;
+#endif
+
   CapturedStream(const CapturedStream&) = delete;
   CapturedStream& operator=(const CapturedStream&) = delete;
 };
 
+#if GTEST_OS_LINUX_ANDROID
+std::string CapturedStream::capture_dir_;
+#endif
+
 GTEST_DISABLE_MSC_DEPRECATED_POP_()
 
 static CapturedStream* g_captured_stderr = nullptr;
@@ -1177,6 +1198,13 @@ const int kStdOutFileno = STDOUT_FILENO;
 const int kStdErrFileno = STDERR_FILENO;
 #endif  // defined(_MSC_VER) || defined(__BORLANDC__)
 
+#if GTEST_OS_LINUX_ANDROID
+// Sets capture directory.
+void SetCaptureDir(std::string dir) {
+  CapturedStream::SetCaptureDir(std::move(dir));
+}
+#endif
+
 // Starts capturing stdout.
 void CaptureStdout() {
   CaptureStream(kStdOutFileno, "stdout", &g_captured_stdout);
